# FS Reconciliation Agents Docker Compose Configuration

services:
  # LangGraph Agent Service - Core AI workflow engine
  langgraph-agent:
    build:
      context: .
      dockerfile: docker/langgraph-agent/Dockerfile
    container_name: fs-reconciliation-langgraph-agent
    env_file:
      - production.env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - reconciliation-network
    depends_on:
      - database
    restart: unless-stopped

  # API Service - RESTful API layer
  api-service:
    build:
      context: .
      dockerfile: docker/api-service/Dockerfile
    container_name: fs-reconciliation-api
    ports:
      - "8000:8000"
    env_file:
      - production.env
    environment:
      - DATABASE_URL=postgresql://reconciliation_user:reconciliation_password@database:5432/reconciliation_db
      - LANGGRAPH_SERVICE_URL=http://langgraph-agent:8001
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ALLOW_ANONYMOUS=true
      - ALLOWED_HOSTS=*
      - ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,*,http://fs-reconciliation-ui
      - DISABLE_INGESTION_LLM=true
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - reconciliation-network
    depends_on:
      - langgraph-agent
      - database
    restart: unless-stopped

  # UI Service - Web-based user interface
  ui-service:
    build:
      context: .
      dockerfile: docker/ui-service/Dockerfile
    container_name: fs-reconciliation-ui
    ports:
      - "3000:80"
    environment:
      - API_BASE_URL=http://api-service:8000
      - NODE_ENV=${NODE_ENV:-production}
    volumes:
      - ./src/ui:/app/src
      - ./logs:/app/logs
    networks:
      - reconciliation-network
    depends_on:
      - api-service
    restart: unless-stopped

  # Database Service - PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: fs-reconciliation-db
    environment:
      - POSTGRES_DB=reconciliation_db
      - POSTGRES_USER=reconciliation_user
      - POSTGRES_PASSWORD=reconciliation_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/database.yaml:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - reconciliation-network
    restart: unless-stopped

  # Redis Cache (for session management and caching)
  redis:
    image: redis:7-alpine
    container_name: fs-reconciliation-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - reconciliation-network
    restart: unless-stopped

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: fs-reconciliation-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - reconciliation-network
    depends_on:
      - ui-service
      - api-service
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  reconciliation-network:
    driver: bridge
